/**
 * Вопрос: в каком порядке будут выведены в консоль сообщения, когда выполнится код выше?
 * Будет ли разница с первым вариантом? Если нет, то можете опустить этот фрагмент объяснения.
 * Если да, то объяснить, в чём разница.
 * Ответ, содержащий лишь порядок вывода сообщений (даже если он будет верным) не засчитывается.
 * Должно быть объяснение, чтобы я понял, что вы поняли.
 */

const btn = document.querySelector('.message');

btn.addEventListener('click', () => {
    Promise.resolve().then(() => console.log('Microtask 1'));
    console.log('Listener 1');
});
btn.addEventListener('click', () => {
    Promise.resolve().then(() => console.log('Microtask 2'));
    console.log('Listener 2');
});

btn.click();

/**
 1) Создаем переменную btn, по querySelector.message достаем DOM елемент (querySelector вернет первый найденый елемент в DOM по данному селектору);
 2) Нa обьект btn добавляется обработчик событий с типом события и call-back функцией, которая будет вызвана при действие пользивателя;
 3) В данном примере на одном елементе навешаны 2 прослушки одново таво же елемента.
 4) Происходит имуляция пользывательноского события Click которая вызывает call-back функцию у первого обработчика данная функция является синхронной
   и выполняется по принцепу "первым пришел первым ушел"
 5) Компилятор находит Promise у первого обработчика событий и так как это ассинхронный код помещает его в веб API освобождая основной кол стек
 6) Promise.resolve().then(() => console.log('Microtask 1')); помещается в очередь микрозадач и ждет освобождения кол стека
 7) Компилятор находит синхронный код и выполняет его по выше сказаным правилам
 8) После вызывается 2я функция и происходит тоже самое
 9) Promise.resolve().then(() => console.log('Microtask 2')); уходит в очередь микрозадач (асинхронную)
 10) Выпролняем синхронный код console.log('Listener 2');
 11) Call stack осбодился, теперь начинает выполняться асинхронный код
 12) Выводим 'Microtask 1' так как приоритет у обоих промисов одинаковый и данный промис первым пришол, тоже самое правило первым пришел первым ушел
 13) Выводим в консоль 'Microtask 2' по тому же принципу
 */