/**
 * Вопрос: в каком порядке будут выведены в консоль сообщения, когда пользователь кликнет по кнопке button?
 * Максимально подробно объяснить, почему.
 * Ответ, содержащий лишь порядок вывода сообщений (даже если он будет верным) не засчитывается.
 * Должно быть объяснение, чтобы я понял, что вы поняли.
 */

const btn = document.querySelector('.message');

btn.addEventListener('click', () => {
    Promise.resolve().then(() => console.log('Microtask 1'));
    console.log('Listener 1');
});
btn.addEventListener('click', () => {
    Promise.resolve().then(() => console.log('Microtask 2'));
    console.log('Listener 2');
});

/**
 * Создаем переменную btn, по querySelector.message достаем DOM елемент (querySelector вернет первый найденый елемент в DOM по данному селектору);
 * Нa обьект btn добавляется обработчик событий с типом события и call-back функцией, которая будет вызвана при действие пользивателя;
 * В данном примере на одном елементе навешаны 2 прослушки одново тавоже елемента.
 * В момент пользивателлного события Click ( все пользывательские события вызванные в TeamPlay вызываются как асенхронные и выстраеваются в асенхроную очень микро задач)
 * Происходит вызов анонимной call-back функции
 * Компилятор находит Promise у первого обработчика событий, и так как это ассинхронный код помещает его в веб API освобожая основной кол стек для синхронного кода
 * Promise.resolve().then(() => console.log('Microtask 1')); помещается в очередь микрозадач и ждет освобождения кол стека
 * Компилятор находит синхронный код и выполняет его по "приинципу первым пришел первым ушол" и выводид Listener 1
 * После того как выполнился синхронный код, call stack освободился, event loop перемещает Promise в call stack и выводится Microtask 1
 * Для 2го события аналогично Listener 2 затем Microtask 2
 */